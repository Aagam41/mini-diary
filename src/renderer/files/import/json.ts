import { toIndexDate } from "../../utils/dateFormat";

/**
 * Parse the JSON file generated by a Day One export and format it as a processable object
 */
export function parseDayOneJson(jsonStr: string): Entries {
	const json: DayOneJson = JSON.parse(jsonStr);

	const importEntries: Entries = {};
	json.entries.forEach(entry => {
		const { creationDate, modifiedDate, text: titleAndText } = entry;

		// Split title and text (if exists)
		let title;
		let text;
		const endOfTitlePos = titleAndText.indexOf("\n\n");
		if (endOfTitlePos <= 0) {
			title = titleAndText;
		} else {
			title = titleAndText.substring(0, endOfTitlePos);
			text = titleAndText.substring(endOfTitlePos + 2);
		}

		// Remove heading formatting from title
		if (title.startsWith("# ")) {
			title = title.substring(2);
		}

		const indexDate = toIndexDate(new Date(creationDate));
		importEntries[indexDate] = {
			dateUpdated: new Date(modifiedDate).toString(),
			title,
			text,
		};
	});
	return importEntries;
}

/**
 * Parse the JSON file generated by a jrnl export and format it as a processable object
 */
export function parseJrnlJson(jsonStr: string): Entries {
	const json: JrnlJson = JSON.parse(jsonStr);
	const jrnlEntries = json.entries;
	const now = new Date().toString();

	const importEntries: Entries = {};
	jrnlEntries.forEach(entry => {
		const indexDate = toIndexDate(new Date(entry.date));
		let title = entry.title.trim();
		let text = entry.body.trim();

		// Add title and text to existing entry if already is one for the same day
		if (indexDate in importEntries) {
			const existingEntry = { ...importEntries[indexDate] };
			if (existingEntry.title) {
				title = `${existingEntry.text} | ${title}`;
			}
			if (existingEntry.text) {
				text = `${existingEntry.text}\n\n----------\n\n${text}`;
			}
		}

		importEntries[indexDate] = {
			dateUpdated: now,
			title,
			text,
		};
	});
	return importEntries;
}

/**
 * Parse the Mini Diary JSON file and format it as a processable object
 */
export function parseMiniDiaryJson(jsonStr: string): Entries {
	const json: MiniDiaryJson = JSON.parse(jsonStr);
	const now = new Date().toString();
	const importEntries: Entries = {};
	Object.entries(json.entries).forEach(([indexDate, entry]: [string, DiaryEntry]) => {
		const { text, title } = entry;

		// Use dateUpdated if defined, otherwise set it to now
		let dateUpdated;
		if ("dateUpdated" in entry) {
			dateUpdated = new Date(entry.dateUpdated).toString();
		} else {
			dateUpdated = now;
		}

		importEntries[indexDate] = {
			dateUpdated,
			title: title.trim(),
			text: text.trim(),
		};
	});
	return importEntries;
}
